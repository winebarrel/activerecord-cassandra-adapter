#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'strscan'

module ActiveCassandra

class SQLParser < Racc::Parser

module_eval(<<'...end sqlparser.y/module_eval...', 'sqlparser.y', 239)

KEYWORDS = %w(
  AND
  AS
  ASC
  BETWEEN
  BY
  COUNT
  DELETE
  DESC
  DISTINCT
  FROM
  IN
  INSERT
  INTO
  IS
  LIMIT
  NOT
  OFFSET
  ORDER
  REGEXP
  SELECT
  SET
  UPDATE
  VALUES
  WHERE
)

KEYWORD_REGEXP = Regexp.compile("(?:#{KEYWORDS.join '|'})\\b", Regexp::IGNORECASE)

def initialize(obj)
  src = obj.is_a?(IO) ? obj.read : obj.to_s
  @ss = StringScanner.new(src)
end

def scan
  piece = nil

  until @ss.eos?
    if (tok = @ss.scan /\s+/)
      # nothing to do
    elsif (tok = @ss.scan /(?:<>|!=|>=|<=|>|<|=)/)
      yield tok, tok
    elsif (tok = @ss.scan KEYWORD_REGEXP)
      yield tok.upcase.to_sym, tok
    elsif (tok = @ss.scan /NULL\b/i)
      yield :NULL, nil
    elsif (tok = @ss.scan /'(?:[^']|'')*'/) #'
      yield :STRING, tok.slice(1...-1).gsub(/''/, "'")
    elsif (tok = @ss.scan /-?(?:0|[1-9]\d*)(?:\.\d+)/)
      yield :NUMBER, tok.to_f
    elsif (tok = @ss.scan /-?(?:0|[1-9]\d*)/)
      yield :NUMBER, tok.to_i
    elsif (tok = @ss.scan /(?:[a-z_]\w+\.|[a-z]\.)*ID\b/i)
      yield :ID, tok
    elsif (tok = @ss.scan /(?:[a-z_]\w+\.|[a-z]\.)*(?:[a-z_]\w+|[a-z])/i)
      yield :IDENTIFIER, tok
    elsif (tok = @ss.scan /[,\(\)\*\.]/)
      yield tok, tok
    else
      raise Racc::ParseError, ('parse error on value "%s"' % @ss.rest.inspect)
    end
  end

  yield false, '$'
end
private :scan

def parse
  yyparse self, :scan
end

...end sqlparser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     3,   119,    80,    80,    80,     8,    12,    41,   138,    59,
   142,   144,    44,    58,   146,    67,   147,    64,    64,    64,
    58,    73,    19,    20,    64,    14,   106,     7,    12,    49,
     9,    12,    12,    12,   139,    73,   139,   139,    12,    96,
   139,    27,   139,    44,    88,    91,    12,    93,    94,    71,
    83,    88,    91,    77,    68,    69,   110,    26,   111,   129,
    24,   112,    84,    85,    86,    87,    89,    90,    92,    84,
    85,    86,    87,    89,    90,    92,    71,    54,    71,    96,
    71,    68,    69,    68,    69,    68,    69,    71,    12,    71,
    98,    71,    68,    69,    68,    69,    68,    69,    71,    99,
    71,   101,    71,    68,    69,    68,    69,    68,    69,    71,
   101,    71,   120,   121,    68,    69,    68,    69,   136,   137,
    78,    79,   134,   135,    12,    12,   105,    12,    44,   107,
    44,   109,    48,    12,    22,    44,   116,    12,    21,    27,
    25,    40,   125,   126,   127,    12,    12,    37,    12,    12,
    32,    12,    30,    12,    12,    11,    28,    10,   119 ]

racc_action_check = [
     0,   102,    59,    80,    96,     0,    49,    30,   124,    44,
   128,   131,    34,    59,   141,    47,   143,    59,    80,    96,
    44,    51,     8,     8,    44,     8,    81,     0,    30,    34,
     0,    59,    80,    96,   124,    52,   128,   131,    44,    81,
   141,    47,   143,    53,    61,    61,     8,    61,    61,   105,
    61,    97,    97,    54,   105,   105,    94,    16,    94,   115,
    13,    95,    61,    61,    61,    61,    61,    61,    61,    97,
    97,    97,    97,    97,    97,    97,   115,    42,    95,    62,
    48,   115,   115,    95,    95,    48,    48,   112,    64,   116,
    67,   139,   112,   112,   116,   116,   139,   139,    78,    73,
   125,    74,   129,    78,    78,   125,   125,   129,   129,    83,
    75,   126,   101,   101,    83,    83,   126,   126,   119,   119,
    58,    58,   117,   117,    77,    40,    79,    11,    39,    82,
    36,    93,    33,    32,    10,    31,    98,    99,     9,    17,
    15,    29,   108,   109,   110,    28,    27,    26,    25,    24,
    23,    21,    20,     7,    19,     3,    18,     1,   100 ]

racc_action_pointer = [
    -2,   157,   nil,   152,   nil,   nil,   nil,   120,    13,   130,
   134,    94,   nil,    30,   nil,   132,    44,   108,   148,   121,
   148,   118,   nil,   146,   116,   115,   135,   113,   112,   133,
    -5,   121,   100,   116,    -2,   nil,   116,   nil,   nil,   114,
    92,   nil,    72,   nil,     5,   nil,   nil,    10,    59,   -27,
   nil,    -2,    12,    29,    42,   nil,   nil,   nil,   104,    -2,
   nil,    28,    61,   nil,    55,   nil,   nil,    84,   nil,   nil,
   nil,   nil,   nil,    75,    76,    85,   nil,    91,    77,   122,
    -1,    21,   124,    88,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   114,    37,    57,     0,    35,   132,   104,
   130,    86,   -27,   nil,   nil,    28,   nil,   nil,   124,   139,
   123,   nil,    66,   nil,   nil,    55,    68,    81,   nil,    92,
   nil,   nil,   nil,   nil,     3,    79,    90,   nil,     5,    81,
   nil,     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    70,
   nil,     9,   nil,    11,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -72,   -72,    -1,   -72,    -2,    -3,    -4,   -72,   -72,   -72,
   -72,   -72,   -53,   -72,   -13,   -72,   -54,   -15,   -72,   -72,
   -72,   -72,   148,   -72,   -72,   -72,   -72,   -72,   -72,   -72,
   -72,   -16,   -72,   -72,   -16,   -49,   -16,   -14,   -55,   -16,
   -72,   -11,   -72,   -12,   -72,   -52,   -54,   -72,   -72,   -72,
   -48,   -38,   -38,   -16,    -9,   -31,   -32,   -33,   -72,   -72,
   -17,   -72,   -18,   -19,   -72,   -23,   -25,   -72,   -57,   -56,
   -51,   -58,   -50,   -72,   -42,   -42,    -7,   -72,   -72,   -72,
   -72,   -72,   -72,   -72,   -62,   -63,   -64,   -65,   -69,   -66,
   -67,   -61,   -68,   -72,   -72,   -72,   -72,   -72,   -72,   -72,
   -45,   -72,   -45,   -10,   -21,   -72,   -26,   -20,   -72,   -72,
   -72,   -34,   -72,   -27,   -24,   -72,   -72,   -40,    -8,   -72,
   -43,   -44,    -6,   -59,   -72,   -72,   -72,   -35,   -72,   -72,
   -28,   -72,   -39,   -41,   -70,   -71,   -46,   -47,   -22,   -72,
   -36,   -72,   -29,   -72,    -5,   -60,   -37,   -30 ]

racc_goto_table = [
    13,    16,    70,    95,    23,    35,   118,    17,   122,    63,
    74,    75,    29,     5,    31,   100,   102,    33,    36,     6,
    38,    39,    15,    43,    82,    46,    42,   124,    60,    62,
    72,    47,   104,    53,   128,    18,     4,   108,   131,   115,
   114,     2,    33,   132,   133,    34,     1,   nil,   141,   113,
    45,   143,   nil,    50,   nil,    51,   nil,    97,    52,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   130,
   103,   nil,    76,   nil,   nil,   nil,   nil,   nil,   nil,   140,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   117,   145 ]

racc_goto_check = [
     6,     6,    19,    22,     6,    29,    13,     7,    13,    18,
    11,    11,     6,     4,     6,    12,    12,     6,     6,     5,
     6,     6,    14,     6,    18,     6,    15,     8,    16,    17,
    29,     7,    19,     6,     8,     9,     3,    19,     8,    22,
    20,     2,     6,    26,    27,    28,     1,   nil,     8,    19,
    10,     8,   nil,    10,   nil,    10,   nil,     6,    10,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,
     6,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,    19,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     6,    19 ]

racc_goto_pointer = [
   nil,    46,    41,    36,    13,    19,    -7,    -1,   -78,    27,
    19,   -41,   -59,   -94,    14,    -4,   -16,   -15,   -35,   -46,
   -56,   nil,   -58,   nil,   nil,   nil,   -74,   -73,    21,   -19 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,    61,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    81,   nil,   123,
    65,    66,   nil,    55,    56,    57,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 44, :_reduce_none,
  1, 44, :_reduce_none,
  1, 44, :_reduce_none,
  1, 44, :_reduce_none,
  10, 45, :_reduce_5,
  8, 46, :_reduce_6,
  6, 46, :_reduce_7,
  8, 46, :_reduce_8,
  4, 57, :_reduce_9,
  6, 57, :_reduce_10,
  1, 58, :_reduce_none,
  1, 58, :_reduce_none,
  1, 52, :_reduce_13,
  3, 52, :_reduce_14,
  1, 52, :_reduce_none,
  0, 53, :_reduce_16,
  2, 53, :_reduce_17,
  2, 53, :_reduce_18,
  1, 59, :_reduce_none,
  3, 59, :_reduce_20,
  3, 61, :_reduce_21,
  5, 61, :_reduce_22,
  1, 60, :_reduce_23,
  3, 60, :_reduce_24,
  1, 63, :_reduce_none,
  3, 63, :_reduce_26,
  3, 64, :_reduce_27,
  4, 64, :_reduce_28,
  5, 64, :_reduce_29,
  6, 64, :_reduce_30,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  3, 68, :_reduce_34,
  4, 68, :_reduce_35,
  5, 66, :_reduce_36,
  6, 67, :_reduce_37,
  0, 54, :_reduce_38,
  4, 54, :_reduce_39,
  0, 69, :_reduce_40,
  1, 69, :_reduce_none,
  0, 55, :_reduce_42,
  2, 55, :_reduce_43,
  2, 55, :_reduce_44,
  0, 56, :_reduce_45,
  2, 56, :_reduce_46,
  2, 56, :_reduce_47,
  5, 47, :_reduce_48,
  1, 71, :_reduce_none,
  3, 71, :_reduce_50,
  3, 72, :_reduce_51,
  4, 48, :_reduce_52,
  1, 49, :_reduce_none,
  1, 50, :_reduce_54,
  3, 50, :_reduce_55,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  1, 51, :_reduce_59,
  3, 51, :_reduce_60,
  1, 65, :_reduce_61,
  1, 65, :_reduce_62,
  1, 65, :_reduce_63,
  1, 65, :_reduce_64,
  1, 65, :_reduce_65,
  1, 65, :_reduce_66,
  1, 65, :_reduce_67,
  1, 65, :_reduce_68,
  1, 65, :_reduce_69,
  1, 70, :_reduce_70,
  1, 70, :_reduce_71 ]

racc_reduce_n = 72

racc_shift_n = 148

racc_token_table = {
  false => 0,
  :error => 1,
  :INSERT => 2,
  :INTO => 3,
  "(" => 4,
  ")" => 5,
  :VALUES => 6,
  :SELECT => 7,
  :FROM => 8,
  :DISTINCT => 9,
  :COUNT => 10,
  :AS => 11,
  "*" => 12,
  "." => 13,
  :WHERE => 14,
  :ID => 15,
  "=" => 16,
  :IN => 17,
  :AND => 18,
  :NOT => 19,
  :IS => 20,
  :NULL => 21,
  :BETWEEN => 22,
  :ORDER => 23,
  :BY => 24,
  :LIMIT => 25,
  :NUMBER => 26,
  :STRING => 27,
  :OFFSET => 28,
  :UPDATE => 29,
  :SET => 30,
  "," => 31,
  :DELETE => 32,
  :IDENTIFIER => 33,
  :REGEXP => 34,
  "<>" => 35,
  "!=" => 36,
  ">=" => 37,
  "<=" => 38,
  ">" => 39,
  "<" => 40,
  :ASC => 41,
  :DESC => 42 }

racc_nt_base = 43

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "INSERT",
  "INTO",
  "\"(\"",
  "\")\"",
  "VALUES",
  "SELECT",
  "FROM",
  "DISTINCT",
  "COUNT",
  "AS",
  "\"*\"",
  "\".\"",
  "WHERE",
  "ID",
  "\"=\"",
  "IN",
  "AND",
  "NOT",
  "IS",
  "NULL",
  "BETWEEN",
  "ORDER",
  "BY",
  "LIMIT",
  "NUMBER",
  "STRING",
  "OFFSET",
  "UPDATE",
  "SET",
  "\",\"",
  "DELETE",
  "IDENTIFIER",
  "REGEXP",
  "\"<>\"",
  "\"!=\"",
  "\">=\"",
  "\"<=\"",
  "\">\"",
  "\"<\"",
  "ASC",
  "DESC",
  "$start",
  "sql",
  "create_statement",
  "read_statemant",
  "update_statemant",
  "delete_statemant",
  "id",
  "id_list",
  "value_list",
  "select_list",
  "where_clause",
  "order_by_clause",
  "limit_clause",
  "offset_clause",
  "count_clause",
  "count_arg",
  "id_search_condition",
  "search_condition",
  "id_predicate",
  "value",
  "boolean_primary",
  "predicate",
  "op",
  "between_predicate",
  "not_in_predicate",
  "null_predicate",
  "ordering_spec",
  "order_spec",
  "set_clause_list",
  "set_clause" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

module_eval(<<'.,.,', 'sqlparser.y', 10)
  def _reduce_5(val, _values)
                                {:command => :insert, :table => val[2], :column_list => val[4], :value_list => val[8]}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 15)
  def _reduce_6(val, _values)
                                {:command => :select, :table => val[3], :select_list => val[1], :condition => val[4], :order => val[5], :limit => val[6], :offset => val[7]}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 19)
  def _reduce_7(val, _values)
                                {:command => :select, :table => val[4], :select_list => val[2], :distinct => val[2], :condition => val[5]}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 23)
  def _reduce_8(val, _values)
                                {:command => :select, :table => val[3], :count => val[1], :condition => val[4], :order => val[5], :limit => val[6], :offset => val[7]}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 28)
  def _reduce_9(val, _values)
                                "count_all"
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 32)
  def _reduce_10(val, _values)
                                val[5]
                          
  end
.,.,

# reduce 11 omitted

# reduce 12 omitted

module_eval(<<'.,.,', 'sqlparser.y', 40)
  def _reduce_13(val, _values)
                                []
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 44)
  def _reduce_14(val, _values)
                                []
                          
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'sqlparser.y', 50)
  def _reduce_16(val, _values)
                                []
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 54)
  def _reduce_17(val, _values)
                                val[1]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 58)
  def _reduce_18(val, _values)
                                val[1]
                          
  end
.,.,

# reduce 19 omitted

module_eval(<<'.,.,', 'sqlparser.y', 64)
  def _reduce_20(val, _values)
                                val[1]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 69)
  def _reduce_21(val, _values)
                                val[2]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 73)
  def _reduce_22(val, _values)
                                val[3]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 78)
  def _reduce_23(val, _values)
                                [val[0]].flatten
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 82)
  def _reduce_24(val, _values)
                                (val[0] << val[2]).flatten
                          
  end
.,.,

# reduce 25 omitted

module_eval(<<'.,.,', 'sqlparser.y', 88)
  def _reduce_26(val, _values)
                                val[1]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 93)
  def _reduce_27(val, _values)
                                {:name => val[0], :op => val[1], :expr => val[2]}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 97)
  def _reduce_28(val, _values)
                                {:name => val[1], :op => val[2], :expr => val[3], :not => true}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 101)
  def _reduce_29(val, _values)
                                {:name => val[0], :op => val[1], :expr => val[3]}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 105)
  def _reduce_30(val, _values)
                                {:name => val[1], :op => val[2], :expr => val[4], :not => true}
                          
  end
.,.,

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

module_eval(<<'.,.,', 'sqlparser.y', 113)
  def _reduce_34(val, _values)
                                {:name => val[0], :op => :'==', :expr => val[2]}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 117)
  def _reduce_35(val, _values)
                                {:name => val[0], :op => :'==', :expr => val[2], :not => true}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 122)
  def _reduce_36(val, _values)
                                {:name => val[0], :op => '$bt', :expr => [val[2], val[4]]}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 127)
  def _reduce_37(val, _values)
                                {:name => val[0], :op => '$in', :expr => val[4], :not => true}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 132)
  def _reduce_38(val, _values)
                                nil
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 136)
  def _reduce_39(val, _values)
                                {:name => val[2], :type => val[3]}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 141)
  def _reduce_40(val, _values)
                                :asc
                          
  end
.,.,

# reduce 41 omitted

module_eval(<<'.,.,', 'sqlparser.y', 147)
  def _reduce_42(val, _values)
                                nil
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 151)
  def _reduce_43(val, _values)
                                val[1].to_i
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 155)
  def _reduce_44(val, _values)
                                val[1]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 160)
  def _reduce_45(val, _values)
                                nil
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 164)
  def _reduce_46(val, _values)
                                val[1].to_i
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 168)
  def _reduce_47(val, _values)
                                val[1]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 173)
  def _reduce_48(val, _values)
                                {:command => :update, :table => val[1], :set_clause_list => val[3], :condition => val[4]}
                          
  end
.,.,

# reduce 49 omitted

module_eval(<<'.,.,', 'sqlparser.y', 179)
  def _reduce_50(val, _values)
                                val[0].merge val[2]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 184)
  def _reduce_51(val, _values)
                              {val[0] => val[2]}
                        
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 189)
  def _reduce_52(val, _values)
                                {:command => :delete, :table => val[2], :condition => val[3]}
                          
  end
.,.,

# reduce 53 omitted

module_eval(<<'.,.,', 'sqlparser.y', 196)
  def _reduce_54(val, _values)
                                [val[0]]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 200)
  def _reduce_55(val, _values)
                                val[0] << val[2]
                          
  end
.,.,

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

module_eval(<<'.,.,', 'sqlparser.y', 209)
  def _reduce_59(val, _values)
                                [val[0]]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 213)
  def _reduce_60(val, _values)
                                val[0] << val[2]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 216)
  def _reduce_61(val, _values)
     '$in'     
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 217)
  def _reduce_62(val, _values)
     '$regexp' 
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 218)
  def _reduce_63(val, _values)
     :'!='     
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 219)
  def _reduce_64(val, _values)
     :'!='     
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 220)
  def _reduce_65(val, _values)
     :'>='     
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 221)
  def _reduce_66(val, _values)
     :'<='     
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 222)
  def _reduce_67(val, _values)
     :'>'      
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 223)
  def _reduce_68(val, _values)
     :'<'      
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 224)
  def _reduce_69(val, _values)
     :'=='     
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 226)
  def _reduce_70(val, _values)
     :asc  
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 227)
  def _reduce_71(val, _values)
     :desc 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class SQLParser


end # module ActiveCassandra
